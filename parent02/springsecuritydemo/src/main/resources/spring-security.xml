<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <security:http security="none" pattern="/favicon.ico"></security:http>
    <security:http security="none" pattern="/login.html"></security:http>
    <!--
        http:用于定义相关权限控制
        auto-config：是否自动配置，可以提供一下自动化的配置
                     设置为true框架会默认显示提供默认的一些配置
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>
<!--login-page:指定登陆页面
        username-parameter：指定登陆页面中的用户名的参数名称
        password-parameter：指定登陆页面中的密码的参数名称
        login-processing-url：指定提交表单后发送的url
        default-target-url 默认登录成功后跳转的url
        always-use-default-target:如果不配置该属性，那么如果我们在访问vue.js被拦截后跳转到登陆页面，当登陆成功后就自动访问vue.js。一旦配置了该属性为true，那么不管我们之前是访问什么url被拦截的，一旦登陆成功后都自动跳转到default-target-url属性指定的url
        authentication-failure-url：指定登陆失败后跳转的页面
-->

        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/index.html"
                             always-use-default-target="true"
                             authentication-failure-url="/login.html"></security:form-login>
        <!--csrf：对应CsrfFilter过滤器-->
        <!--disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）-->
        <security:csrf disabled="true"></security:csrf>
    </security:http>

    <!--
       authentication-manager:认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--&lt;!&ndash;-->
            <!--authentication-provider:认证提供者，执行据体的认证逻辑-->
        <!--&ndash;&gt;-->
        <!--<security:authentication-provider>-->
            <!--&lt;!&ndash;-->
                <!--user-service-->
            <!--&ndash;&gt;-->
            <!--<security:user-service>-->
                <!--&lt;!&ndash;-->
                    <!--user:定义用户信息，指定用户名、密码、角色-->
                    <!--{noop}：表示当前使用的密码为明文，没有被加密过-->
                    <!--表示只要使用用户名：admin，密码是明文的admin进行登录的用户，就给该用户赋予ROLE_ADMIN的角色-->
                <!--&ndash;&gt;-->
                <!--<security:user name="admin" authorities="ROLE_ADMIN" password="{noop}admin"></security:user>-->
            <!--</security:user-service>-->
        <!--</security:authentication-provider>-->
        <security:authentication-provider user-service-ref="securityUserService">
            <!--指定密码加密策略-->
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <context:component-scan base-package="com.health"></context:component-scan>
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
</beans>